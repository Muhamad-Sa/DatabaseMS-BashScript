
shopt -s extglob
export LC_COLLATE=C

echo -e "\n           Welcome To Our DBMS"

function mainMenu {
  echo -e "\n+-------------Main Menu-------------+"
  echo "Press (1) to Create Database        -->"
  echo "Press (2) to List Databases         -->"
  echo "Press (3) to Connect to Database    -->"
  echo "Press (4) to Drop Database          -->"
  echo "Press (5) to Exit                   -->"
  echo "+-----------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  createDatabase ;;
    2)  listDatabases ;;
    3)  connectDatbase ;;
    4)  dropDatabase ;;
    5)  exit ;;
    *)  echo "Wrong Choice, Please enter a valid number" ; mainMenu;
  esac
}

# Functions
function createDatabase {
    while true
    do
        read -p "Enter Datbase Name: " DBName
        if [[ $DBName =~ ^[A-Z]?[a-z_]*[a-z]$ ]]
        then
                if [[ ! -e $DBName ]]
                then
                    mkdir ./$DBName
                    echo +-----------------------------+
                    echo "Database successfully created! :)"
                    listDatabases
                else
                    echo Database Already Exist!
                fi    
        else
            echo Enter a Valid Name!   
        fi    
    done
    mainMenu  
}

function listDatabases {
    echo All_Databases:
    echo +---------------+
    declare -i count=0
    for dir in $(ls -l | grep ^d | cut -d " " -f 9 | sort -f)
    do
        count+=1
        echo "$count) $dir"
    done
    echo +---------------+
    mainMenu
}


function connectDatbase {
  echo -e "Enter Database Name: \c"
  read databaseName
  cd ./$databaseName 2>> ./errorsFile
  if [[ $? == 0 ]]; then
    echo "Database $databaseName was Successfully Selected"
    tablesMenu
  else
    echo "Database $databaseName wasn't found"
    mainMenu
  fi
}


function dropDatabase {
  echo -e "Enter Database Name: \c"
  read databaseName
  rm -r ./$databaseName 2>> ./errorsFile
  if [[ $? == 0 ]]; then
    echo "Database Dropped Successfully"
  else
    echo "Database Not found"
  fi
  mainMenu
}


function tablesMenu {
  echo -e "\n+----------------Table Menu----------------+"
  echo "Press (1) to Create Table                  -->"
  echo "Press (2) to List Tables                   -->"
  echo "Press (3) to Drop Table                    -->"
  echo "Press (4) to Insert into Table             -->"
  echo "Press (5) to Select from Table             -->"
  echo "Press (6) to Delete from Table             -->"
  echo "Press (7) to Update Table                  -->"
  echo "Press (8) to Exit                          -->"
  echo "+-----------------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  createTable ;;
    2)  ls .; tablesMenu ;;
    3)  dropTable;;
    4)  insertIntoTable;;
    5)  selectFromTable;;
    6)  deleteFromTable;;
    7)  updateTable;;
    8)  exit ;;
    *)  echo "Wrong Choice, Please enter a valid number" ; tablesMenu;
  esac
}



selectFromTable() {
  echo "Enter table name:"
  read table_name
  table_file="$table_name"

  if [ ! -f "$table_file" ]; then
    echo "Table $table_name does not exist."
    selectFromTable
  fi

  echo "Enter column names to display (comma-separated, or * for all columns):"
  read columns
  echo -e "\n+-----------------------------------------+"
  if [ "$columns" == "*" ]; then
    cat "$table_file"
  
  else
  
      if ! validate_columns_format "$columns"; then
      echo "Invalid column format. Please use comma-separated values with optional trailing comma (e.g., value1,value2,)."
      selectFromTable
    fi

    header=$(sed -n '1p' "$table_file" | tr ',' '|')
    column_indices=$(echo "$columns" | tr ',' '\n' | while read col; do
      echo "$header" | tr '|' '\n' | grep -n "^$col$" | cut -d: -f1
    done | tr '\n' ',' | sed 's/,$//' 2>> ../errorsFile )

    if [ -z "$column_indices" ]; then
      echo "Please enter valid column names."
      selectFromTable
    fi

    if [ "$(wc -l < "$table_file")" -le 1 ]; then
      echo "The table $table_name is empty or contains only the header."
      selectFromTable
    fi

    {
      echo "$header" | tr '|' ',' | cut -d',' -f $column_indices
      tail -n +2 "$table_file" | cut -d',' -f $column_indices
    } | column -t -s, 
  fi

  selectFunMenu

}

validate_columns_format() {
  local input="$1"
  if [[ "$input" =~ ^([a-zA-Z]+,)+ || "$input" =~ ^[a-zA-Z0-9_]+$ ]]; then
    return 0
  else
    return 1
  fi
}

  function selectFunMenu {
  echo -e "+-----------------------------------------+"
  echo "Press (1) to Make Another Operation        -->"
  echo "Press (2) to Go To Table Menu              -->"
  echo "Press (3) to Go To Main Menu               -->"
  echo "Press (4) to Exit                          -->"
  echo "+-----------------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  selectFromTable ;;
    2)  tablesMenu ;;
    3)  mainMenu ;;
    4)  exit ;;
    *)  echo "Wrong Choice, Please enter a valid number" ; selectFunMenu;
  esac

  }

mainMenu