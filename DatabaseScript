
shopt -s extglob
export LC_COLLATE=C

echo -e "\n           Welcome To Our DBMS"

function mainMenu {
  echo -e "\n+-------------Main Menu-------------+"
  echo "Press (1) to Create Database        -->"
  echo "Press (2) to List Databases         -->"
  echo "Press (3) to Connect to Database    -->"
  echo "Press (4) to Drop Database          -->"
  echo "Press (5) to Exit                   -->"
  echo "+-----------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  createDatabase ;;
    2)  listDatabases ;;
    3)  connectDatbase ;;
    4)  dropDatabase ;;
    5)  exit ;;
    *)  echo "Wrong Choice, Please enter a valid number" ; mainMenu;
  esac
}

# Functions
function createDatabase {
    while true
    do
        read -p "Enter Datbase Name: " DBName
        if [[ $DBName =~ ^[A-Z]?[a-z_]*[a-z]$ ]]
        then
                if [[ ! -e $DBName ]]
                then
                    mkdir ./$DBName
                    echo +-----------------------------+
                    echo "Database successfully created! :)"
                    clear
                    listDatabases
                else
                    echo Database Already Exists!
                fi    
        else
            echo Enter a Valid Name!   
        fi    
    done
    mainMenu  
}

function listDatabases {
    echo All_Databases:
    echo +---------------+
    declare -i count=0
    for dir in $(ls -l | grep ^d | cut -d " " -f 10 | sort -f)
    do
        count+=1
        echo "$count) $dir"
    done
    echo +---------------+
    mainMenu
}


function connectDatbase {
  echo -e "Enter Database Name: \c"
  read databaseName
  cd ./$databaseName 2>> ./errorsFile
  if [[ $? == 0 ]]; then
    echo "Database $databaseName was Successfully Selected"
    clear
    tablesMenu $databaseName #call with database name
  else
    echo "Database $databaseName wasn't found"
    mainMenu
  fi
}


function dropDatabase {
  echo -e "Enter Database Name: \c"
  read databaseName
  rm -r ./$databaseName 2>> ./errorsFile
  if [[ $? == 0 ]]; then
    echo "Database Dropped Successfully"
  else
    echo "Database Not found"
  fi
  mainMenu
}


function tablesMenu (){
  source cd ./$1 2>> ../errorsFile
  echo -e "\n+----------------Table Menu----------------+"
  echo "Press (1) to Create Table                  -->"
  echo "Press (2) to List Tables                   -->"
  echo "Press (3) to Drop Table                    -->"
  echo "Press (4) to Insert into Table             -->"
  echo "Press (5) to Select from Table             -->"
  echo "Press (6) to Delete from Table             -->"
  echo "Press (7) to Update Table                  -->"
  echo "Press (8) to Exit                          -->"
  echo "+-----------------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  createTable ;;
    2)  listTables ;;
    3)  dropTable ;;
    4)  insertToTable;;
    5)  selectFromTable;;
    6)  deleteFromTable;;
    7)  updateTable;;
    8)  mainMenu ;; #return to Main menu 
    *)  echo "Wrong Choice, Please enter a valid number" ; tablesMenu;
  esac
}

function createTable {
  while true
  do
    read -p "Name of the table: " tableName
    if [[ $tableName =~ ^[A-Z]?[a-z_]*[a-z]$ ]]
          then
              if [[ ! -e $tableName ]]
              then
                  touch ./$tableName
                  echo +-----------------------------+
                  echo "Table successfully created! :)"
                  createColumns $tableName   
              else
                  echo This Table Already Exists!
              fi    
          else
              echo Enter a Valid Name!   
    fi
  done     
}


function createColumns {
    local tbname=$1  
    local schemaFile=".${tbname}_schema"
    local header=""
    #create schema file
    touch $schemaFile 

    while true
    do
        read -p "Number of the columns: " columns
        # validate num of columns
        if [[ $columns =~ ^[0-9]+$ ]]
        then
            clear
            for ((i=1;i<=columns;i++))
            do
                # empty line for schema..
                
                line=""

                # validate column name
                while true
                    do
                        read -p "Column($i) name: " colName
                        if [[ $colName =~ ^[A-Za-z][A-Za-z_]*[A-Za-z]$ ]]
                        then  
                            if grep -qi "^$colName:" "$schemaFile"; then
                                echo "Column $colName already exists in the schema file."
                            else
                                header+=$colName
                                line+=$colName:
                                break
                            fi
                        else
                            echo Enter a Valid Name for Col!
                        fi
                    done

                # prompt for type
                while true; do
                    echo "Column($i) type (INT, VARCHAR): "
                    PS3="Choice: "
                    select type in INT VARCHAR; do
                        case $type in
                            "INT")
                                line+=$type
                                break 2
                                ;;
                            "VARCHAR")
                                line+=$type
                                break 2
                                ;;
                            *)
                                echo "Invalid! Please select a valid column type."
                                ;;
                        esac
                    done
                done

                # prompt for primaryKey
                while true 
                do
                    echo "Is Column($i) Primary-Key ? "
                    read -p "Y/N: "
                    case $REPLY in
                        [Yy][Ee][Ss]|[Yy])
                            header+="(PK),"
                            line+=":PK"
                            break
                            ;;
                        [Nn][Oo]|[Nn])
                            header+=","
                            line+=""
                            break
                            ;;
                        *)
                            echo "Invalid! Please select Yes/No."
                            ;;
                    esac
                done
                #end of inputs
                echo $line >> $schemaFile 2>> ../errorsFile 
            done

            # Remove any (PK) from header
            header=$(echo $header | sed 's/(PK)//g')
            
            #end of for-loop / make header for file..
            header=${header%,}

            # Create the data file and add the header
            echo $header > $tbname 2>> ../errorsFile
        
            echo +-----------------------------------+
            echo +--$1 Schema Created Successfully!--+
            echo +-----------------------------------+
            tablesMenu
        else
            echo "Not a valid number!"
        fi
    done     
}

function insertToTable {
    read -p "Enter the table you want to insert: " TbName
    if [ -e $TbName ]
    then
        local line
        read -p "How many rows you want to insert ? " RNum
        clear
        for ((i=1;i<=$RNum;i++))
        do  
            clear
            echo -e "Row($i): "
            awk -F: -v line="" '
            {   
                if ($2 == "VARCHAR") {
                    tvalid = 0
                    while(!tvalid){
                        print "Enter value for TEXT "$1": "
                        getline value < "/dev/tty"
                        if(value ~ /^[A-Za-z][A-Za-z0-9]*$/){
                            if ($3 == "PK") {
                                tvalid = 1
                                line = line value "(PK)" " "
                            }else{
                            
                                tvalid = 1
                                line = line value " " 
                            }                           
                        }else{
                            print "Invalid! Please Enter string type."
                        }
                    }
                    
                } else {
                    ivalid = 0
                    while(!ivalid){
                        print "Enter value for INT "$1":"
                        getline value < "/dev/tty"
                        if (value ~/^[0-9]*$/){
                            if ($3 == "PK") {
                                ivalid = 1
                                line = line value "(PK)" " "
                            }else{
                                ivalid = 1
                                line = line value " " 
                            }      
                        }else{
                            print "Invalid! Please Enter a number."
                        }
                    }
                }

            }
            END{ print line >> "'"$TbName"'"}
            ' ".$TbName"_schema
            
        done
        clear
        echo +-----------------------+
        echo +--Rows added successfully to table--+
        echo +-----------------------+
        tablesMenu

    else
        echo "Table not Exist!"
        insertToTable
    fi        
}

function listTables {
    clear
    echo All_Tabels:
    echo +---------------+
    declare -i count=0
    for filee in $(ls $1 2>> ../errorsFile)
    do
        if [[ $(basename "$filee") == "errorsFile" ]]
        then
            continue
        else    
            count+=1
            echo "$count) $filee"
        fi    
    done
    echo +---------------+
    tablesMenu
}

function dropTable {
    clear
    read -p"Enter table name to drop: " dropName
    if [ -e $dropName ]
    then
        rm -r "$dropName" ".$dropName"_schema 2>/dev/null
        echo "Table $dropName and its schema have been dropped."
    else
        echo "Table $dropName does not exist."
    fi
    tablesMenu
}


selectFromTable() {
  echo "Enter table name:"
  read table_name
  table_file="$table_name"

  if [ ! -f "$table_file" ]; then
    echo "Table $table_name does not exist."
    selectFromTable
  fi

  echo "Enter column names to display (comma-separated, or * for all columns):"
  read columns
  echo -e "\n+-----------------------------------------+\n"
  if [ "$columns" == "*" ]; then
    cat "$table_file"
  
  else
  
      if ! validate_columns_format "$columns"; then
      echo "Invalid column format. Please use comma-separated values with optional trailing comma (e.g., value1,value2,)."
      selectFromTable
    fi

    header=$(sed -n '1p' "$table_file" | tr ',' '|')
    column_indices=$(echo "$columns" | tr ',' '\n' | while read col; do
      echo "$header" | tr '|' '\n' | grep -n "^$col$" | cut -d: -f1
    done | tr '\n' ',' | sed 's/,$//' 2>> ../errorsFile )

    if [ -z "$column_indices" ]; then
      echo "Please enter valid column names."
      selectFromTable
    fi

    if [ "$(wc -l < "$table_file")" -le 1 ]; then
      echo "The table $table_name is empty or contains only the header."
      selectFromTable
    fi

    {
      echo "$header" | tr '|' ',' | cut -d',' -f $column_indices
      tail -n +2 "$table_file" | cut -d',' -f $column_indices
    } | column -t -s, 
  fi

  selectFunMenu
}

deleteFromTable() {
  echo "Enter table name:"
  read table_name
  table_file="$table_name"

  if [ ! -f "$table_file" ]; then
    echo "Table $table_name does not exist."
    selectFunMenu
  fi

  echo "Enter column name for deletion:"
  read column_name

  echo "Enter value to delete:"
  read value

  # Load metadata
  schema_file=".${table_name}_schema"
  if [ ! -f "$schema_file" ]; then
    echo "Schema file $schema_file does not exist."
    selectFunMenu
  fi

  # Identify the primary key column
  primary_key_column=$(grep ':PK' "$schema_file" | cut -d':' -f1)

  if [ "$column_name" == "$primary_key_column" ]; then
    echo "Cannot delete rows based on the primary key column ($primary_key_column)."
    selectFunMenu
  fi

  # Get the header from the table file
  header=$(sed -n '1p' "$table_file" | tr ',' '|')

  # Get the index of the column to delete from
  column_index=$(echo "$header" | tr '|' '\n' | grep -n "^$column_name$" | cut -d: -f1)

  if [ -z "$column_index" ]; then
    echo "Column $column_name does not exist in the table."
    deleteFromTable
  fi

  # Remove rows that match the criteria
  awk -v col="$column_index" -v val="$value" -F',' '
    NR==1 {print; next}  # Always print the header
    $col != val {print}  # Print the row if the column value does not match the specified value
  ' "$table_file" > temp_file && mv temp_file "$table_file"

  echo "Rows where $column_name = $value have been deleted (if any existed)."
  selectFunMenu
}


updateTable() {
  echo "Enter table name:"
  read table_name
  table_file="$table_name"
  schema_file=".${table_name}_schema"

  # Check if the table file and schema file exist
  if [ ! -f "$table_file" ]; then
    echo "Table $table_name does not exist."
    updateTable
  fi

  if [ ! -f "$schema_file" ]; then
    echo "Schema file $schema_file does not exist."
    updateTable
  fi

  # Extract the primary key column from metadata
  pk_column=$(grep 'PK' "$schema_file" | cut -d':' -f1)
  
  if [ -z "$pk_column" ]; then
    echo "No primary key defined in the schema."
    updateTable
  fi

  # Display current data for reference
  echo "Current data in the table:"
  cat "$table_file"
  
  # Get the primary key value to identify the record
  echo "Enter the $pk_column value of the record to update:"
  read pk_value

  # Validate if the primary key value exists in the table
  if ! awk -v pk="$pk_value" -v FS='[ ,]+' '$1==pk {found=1} END{if(!found) exit 1}' "$table_file"; then
    echo "Primary key value $pk_value does not exist in the table."
    updateTable
  fi

  # Prompt for columns to update and their new values
  echo "Enter column names and their new values in the format 'column=value' (comma-separated):"
  read updates
  IFS=',' read -r -a updates_array <<< "$updates"

  # Check if there are updates to apply
  if [ -z "$updates" ]; then
    echo "No updates specified."
    updateTable
  fi

  # Validate updates format and columns
  declare -A schema_map
  index=1
  while IFS=':' read -r column data_type constraint; do
    schema_map["$column"]=$index
    ((index++))
  done < "$schema_file"

  for update in "${updates_array[@]}"; do
    if ! [[ "$update" =~ ^[a-zA-Z_]+=[^,]+$ ]]; then
      echo "Invalid format: $update. Expected format 'column=value'."
      updateTable
    fi

    column=$(echo "$update" | cut -d'=' -f1)
    if [ -z "${schema_map[$column]}" ]; then
      echo "Column $column does not exist."
      updateTable
    fi
  done

  # Create a temporary file to store updated data
  temp_file=$(mktemp)
  
  # Write the header to the temporary file
  head -n 1 "$table_file" > "$temp_file"

  # Iterate over each line in the table and apply updates
  {
    head -n 1 "$table_file"  # Header
    tail -n +2 "$table_file" | while IFS=' ' read -r -a row_array; do
      if [ "${row_array[${schema_map[$pk_column]}-1]}" == "$pk_value" ]; then
        # Update the row
        for update in "${updates_array[@]}"; do
          column=$(echo "$update" | cut -d'=' -f1)
          new_value=$(echo "$update" | cut -d'=' -f2)
          column_index=${schema_map[$column]}
          row_array[$((column_index - 1))]="$new_value"
        done
        # Write the updated row to the temp file
        IFS=' ' echo "${row_array[*]}" >> "$temp_file"
      else
        # Write the unchanged row to the temp file
        IFS=' ' echo "${row_array[*]}" >> "$temp_file"
      fi
    done
  } > "$temp_file"

  # Replace the original table file with the updated file
  mv "$temp_file" "$table_file"

  echo "Record updated successfully."
  tablesMenu
}







validate_columns_format() {
  local input="$1"
  if [[ "$input" =~ ^([a-zA-Z]+,)+ || "$input" =~ ^[a-zA-Z0-9_]+$ ]]; then
    return 0
  else
    return 1
  fi
}

  function selectFunMenu {
  echo -e "+-----------------------------------------+"
  echo "Press (1) to Make Another Operation        -->"
  echo "Press (2) to Go To Table Menu              -->"
  echo "Press (3) to Go To Main Menu               -->"
  echo "Press (4) to Delete from Table             -->"
  echo "Press (5) to Exit                          -->"
  echo "+-----------------------------------------+"
  echo -e "Enter Choice: \c"
  read choice

  case $choice in
    1)  selectFromTable ;;
    2)  tablesMenu ;;
    3)  mainMenu ;;
    4)  deleteFromTable ;;
    5)  exit ;;
    *)  echo "Wrong Choice, Please enter a valid number" ; selectFunMenu;
  esac
  }

mainMenu
